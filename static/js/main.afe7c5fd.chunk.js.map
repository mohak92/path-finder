{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","algorithms/aStar.js","PathfindingVisualizer/PathfindingVisualizer.jsx","algorithms/bfs.js","algorithms/dfs.js","App.js","reportWebVitals.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","AStar","sortByDistance","distanceToFinishNode","PathfindingVisualizer","getInitialGrid","rowCount","state","ROW_COUNT","colCount","COLUMN_COUNT","initialGrid","currentRow","createNode","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","Math","abs","isNode","mouseIsPressed","MOBILE_ROW_COUNT","MOBILE_COLUMN_COUNT","isRunning","isStartNode","isFinishNode","isWallNode","currRow","currCol","isDesktopView","handleMouseDown","bind","handleMouseLeave","toggleIsRunning","setState","clearGrid","clearWalls","alert","isGridClear","document","getElementById","newGrid","getNewGridWithWallToggled","nodeClassName","slice","algo","nextNodesStack","currentNode","nextNode","bfs","pop","dfs","nodesInShortestPathOrder","unshift","getNodesInShortestPathOrder","animate","i","setTimeout","animateShortestPath","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","onMouseLeave","map","rowIdx","nodeIdx","handleMouseEnter","handleMouseUp","onClick","visualize","toggleView","newNode","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.afe7c5fd.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport './Node.css'\n\nexport default class Node extends Component {\n    render() {\n        const {\n            col,\n            isFinish,\n            isStart,\n            isWall,\n            onMouseDown,\n            onMouseEnter,\n            onMouseUp,\n            row,\n        } = this.props;\n\n        const extraClassName = isFinish\n            ? 'node-finish'\n            : isStart\n            ? 'node-start'\n            : isWall\n            ? 'node-wall'\n            : '';\n\n        return(\n            <td\n                id={`node-${row}-${col}`}\n                className={`node ${extraClassName}`}\n                onMouseDown={() => onMouseDown(row, col)}\n                onMouseEnter={() => onMouseEnter(row, col)}\n                onMouseUp={() => onMouseUp()}\n            ></td>\n        );\n    }\n}","// Returns all nodes in the order in which they were visited.\n// Make nodes point back to their previous node so that we can compute the shortest path\n// by backtracking from the finish node.\n\nexport function dijkstra(grid, startNode, finishNode) {\n    const visitedNodesInOrder = [];\n    startNode.distance = 0;\n    const unvisitedNodes = getAllNodes(grid); // Q: different from using grid or slice of grid???\n  \n    while (unvisitedNodes.length) {\n      sortNodesByDistance(unvisitedNodes);\n      const closestNode = unvisitedNodes.shift();\n      // If we encounter a wall, we skip it.\n      if (!closestNode.isWall) {\n        // If the closest node is at a distance of infinity,\n        // we must be trapped and should stop.\n        if (closestNode.distance === Infinity) return visitedNodesInOrder;\n        closestNode.isVisited = true;\n        visitedNodesInOrder.push(closestNode);\n        if (closestNode === finishNode) return visitedNodesInOrder;\n        updateUnvisitedNeighbors(closestNode, grid);\n      }\n    }\n  }\n  \n  function getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n      for (const node of row) {\n        nodes.push(node);\n      }\n    }\n    return nodes;\n  }\n  \n  function sortNodesByDistance(unvisitedNodes) {\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n  }\n  \n  function updateUnvisitedNeighbors(node, grid) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n      neighbor.distance = node.distance + 1;\n      neighbor.previousNode = node;\n    }\n  }\n  \n  function getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const {col, row} = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n  }","// Returns all nodes in the order in which they were visited.\n// Make nodes point back to their previous node so that we can compute the shortest path\n// by backtracking from the finish node.\n\nexport function AStar(grid, startNode, finishNode) {\n    const visitedNodesInOrder = [];\n    startNode.distance = 0;\n    // Q: different from using grid or slice of grid???\n    const unvisitedNodes = getAllNodes(grid);\n\n    while(unvisitedNodes.length) {\n        sortByDistance(unvisitedNodes);\n        const closestNode = unvisitedNodes.shift();\n        // If we encounter a wall, we skip it.\n        if(!closestNode.isWall) {\n            // If the closest node is at a distance of infinity,\n            // we must be trapped and should stop.\n            if(closestNode.distance === Infinity) {\n                return visitedNodesInOrder;\n            }\n\n            closestNode.isVisited = true;\n            visitedNodesInOrder.push(closestNode);\n\n            if(closestNode === finishNode) {\n                return visitedNodesInOrder;\n            }\n\n            updateUnvisitedNeighbors(closestNode, grid);\n        }\n    }\n}\n\nfunction getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n        for (const node of row) {\n            nodes.push(node);\n        }\n    }\n    return nodes;\n}\n\nfunction sortByDistance(unvisitedNodes) {\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    for(const neighbor of unvisitedNeighbors) {\n        neighbor.distance = node.distance + 1 + neighbor.distanceToFinishNode;\n        neighbor.previousNode = node;\n    }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n    const neighbors= [];\n    const {col, row} = node;\n    if(row > 0) {\n        neighbors.push(grid[row - 1][col]);\n    }\n\n    if(row < grid.length - 1) {\n        neighbors.push(grid[row + 1][col]);\n    }\n\n    if(col > 0) {\n        neighbors.push(grid[row][col - 1]);\n    }\n\n    if(col < grid[0].length - 1) {\n        neighbors.push(grid[row][col + 1]);\n    }\n\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n}","import React, {Component} from 'react';\nimport Node from './Node/Node';\nimport {dijkstra} from '../algorithms/dijkstra';\nimport {AStar} from '../algorithms/aStar';\nimport {dfs} from '../algorithms/dfs';\nimport {bfs} from '../algorithms/bfs';\n\nimport './PathfindingVisualizer.css';\n\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      START_NODE_ROW: 5,\n      FINISH_NODE_ROW: 5,\n      START_NODE_COL: 5,\n      FINISH_NODE_COL: 15,\n      mouseIsPressed: false,\n      ROW_COUNT: 25,\n      COLUMN_COUNT: 35,\n      MOBILE_ROW_COUNT: 10,\n      MOBILE_COLUMN_COUNT: 20,\n      isRunning: false,\n      isStartNode: false,\n      isFinishNode: false,\n      isWallNode: false, // xxxxxxx\n      currRow: 0,\n      currCol: 0,\n      isDesktopView: true,\n    };\n\n    this.handleMouseDown = this.handleMouseDown.bind(this);\n    this.handleMouseLeave = this.handleMouseLeave.bind(this);\n    this.toggleIsRunning = this.toggleIsRunning.bind(this);\n  }\n\n  componentDidMount() {\n    const grid = this.getInitialGrid();\n    this.setState({grid});\n  }\n\n  toggleIsRunning() {\n    this.setState({isRunning: !this.state.isRunning});\n  }\n\n  toggleView() {\n    if (!this.state.isRunning) {\n      this.clearGrid();\n      this.clearWalls();\n      const isDesktopView = !this.state.isDesktopView;\n      let grid;\n      if (isDesktopView) {\n        grid = this.getInitialGrid(\n          this.state.ROW_COUNT,\n          this.state.COLUMN_COUNT,\n        );\n        this.setState({isDesktopView, grid});\n      } else {\n        if (\n          this.state.START_NODE_ROW > this.state.MOBILE_ROW_COUNT ||\n          this.state.FINISH_NODE_ROW > this.state.MOBILE_ROW_COUNT ||\n          this.state.START_NODE_COL > this.state.MOBILE_COLUMN_COUNT ||\n          this.state.FINISH_NODE_COL > this.state.MOBILE_COLUMN_COUNT\n        ) {\n          alert('Start & Finish Nodes Must Be within 10 Rows x 20 Columns');\n        } else {\n          grid = this.getInitialGrid(\n            this.state.MOBILE_ROW_COUNT,\n            this.state.MOBILE_COLUMN_COUNT,\n          );\n          this.setState({isDesktopView, grid});\n        }\n      }\n    }\n  }\n\n  /******************** Set up the initial grid ********************/\n  getInitialGrid = (\n    rowCount = this.state.ROW_COUNT,\n    colCount = this.state.COLUMN_COUNT,\n  ) => {\n    const initialGrid = [];\n    for (let row = 0; row < rowCount; row++) {\n      const currentRow = [];\n      for (let col = 0; col < colCount; col++) {\n        currentRow.push(this.createNode(row, col));\n      }\n      initialGrid.push(currentRow);\n    }\n    return initialGrid;\n  };\n\n  createNode = (row, col) => {\n    return {\n      row,\n      col,\n      isStart:\n        row === this.state.START_NODE_ROW && col === this.state.START_NODE_COL,\n      isFinish:\n        row === this.state.FINISH_NODE_ROW &&\n        col === this.state.FINISH_NODE_COL,\n      distance: Infinity,\n      distanceToFinishNode:\n        Math.abs(this.state.FINISH_NODE_ROW - row) +\n        Math.abs(this.state.FINISH_NODE_COL - col),\n      isVisited: false,\n      isWall: false,\n      previousNode: null,\n      isNode: true,\n    };\n  };\n\n  /******************** Control mouse events ********************/\n  handleMouseDown(row, col) {\n    if (!this.state.isRunning) {\n      if (this.isGridClear()) {\n        if (\n          document.getElementById(`node-${row}-${col}`).className ===\n          'node node-start'\n        ) {\n          this.setState({\n            mouseIsPressed: true,\n            isStartNode: true,\n            currRow: row,\n            currCol: col,\n          });\n        } else if (\n          document.getElementById(`node-${row}-${col}`).className ===\n          'node node-finish'\n        ) {\n          this.setState({\n            mouseIsPressed: true,\n            isFinishNode: true,\n            currRow: row,\n            currCol: col,\n          });\n        } else {\n          const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n          this.setState({\n            grid: newGrid,\n            mouseIsPressed: true,\n            isWallNode: true,\n            currRow: row,\n            currCol: col,\n          });\n        }\n      } else {\n        this.clearGrid();\n      }\n    }\n  }\n\n  isGridClear() {\n    for (const row of this.state.grid) {\n      for (const node of row) {\n        const nodeClassName = document.getElementById(\n          `node-${node.row}-${node.col}`,\n        ).className;\n        if (\n          nodeClassName === 'node node-visited' ||\n          nodeClassName === 'node node-shortest-path'\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.isRunning) {\n      if (this.state.mouseIsPressed) {\n        const nodeClassName = document.getElementById(`node-${row}-${col}`)\n          .className;\n        if (this.state.isStartNode) {\n          if (nodeClassName !== 'node node-wall') {\n            const prevStartNode = this.state.grid[this.state.currRow][\n              this.state.currCol\n            ];\n            prevStartNode.isStart = false;\n            document.getElementById(\n              `node-${this.state.currRow}-${this.state.currCol}`,\n            ).className = 'node';\n\n            this.setState({currRow: row, currCol: col});\n            const currStartNode = this.state.grid[row][col];\n            currStartNode.isStart = true;\n            document.getElementById(`node-${row}-${col}`).className =\n              'node node-start';\n          }\n          this.setState({START_NODE_ROW: row, START_NODE_COL: col});\n        } else if (this.state.isFinishNode) {\n          if (nodeClassName !== 'node node-wall') {\n            const prevFinishNode = this.state.grid[this.state.currRow][\n              this.state.currCol\n            ];\n            prevFinishNode.isFinish = false;\n            document.getElementById(\n              `node-${this.state.currRow}-${this.state.currCol}`,\n            ).className = 'node';\n\n            this.setState({currRow: row, currCol: col});\n            const currFinishNode = this.state.grid[row][col];\n            currFinishNode.isFinish = true;\n            document.getElementById(`node-${row}-${col}`).className =\n              'node node-finish';\n          }\n          this.setState({FINISH_NODE_ROW: row, FINISH_NODE_COL: col});\n        } else if (this.state.isWallNode) {\n          const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n          this.setState({grid: newGrid});\n        }\n      }\n    }\n  }\n\n  handleMouseUp(row, col) {\n    if (!this.state.isRunning) {\n      this.setState({mouseIsPressed: false});\n      if (this.state.isStartNode) {\n        const isStartNode = !this.state.isStartNode;\n        this.setState({isStartNode, START_NODE_ROW: row, START_NODE_COL: col});\n      } else if (this.state.isFinishNode) {\n        const isFinishNode = !this.state.isFinishNode;\n        this.setState({\n          isFinishNode,\n          FINISH_NODE_ROW: row,\n          FINISH_NODE_COL: col,\n        });\n      }\n      this.getInitialGrid();\n    }\n  }\n\n  handleMouseLeave() {\n    if (this.state.isStartNode) {\n      const isStartNode = !this.state.isStartNode;\n      this.setState({isStartNode, mouseIsPressed: false});\n    } else if (this.state.isFinishNode) {\n      const isFinishNode = !this.state.isFinishNode;\n      this.setState({isFinishNode, mouseIsPressed: false});\n    } else if (this.state.isWallNode) {\n      const isWallNode = !this.state.isWallNode;\n      this.setState({isWallNode, mouseIsPressed: false});\n      this.getInitialGrid();\n    }\n  }\n\n  /******************** Clear Board/Walls ********************/\n\n  clearGrid() {\n    if (!this.state.isRunning) {\n      const newGrid = this.state.grid.slice();\n      for (const row of newGrid) {\n        for (const node of row) {\n          let nodeClassName = document.getElementById(\n            `node-${node.row}-${node.col}`,\n          ).className;\n          if (\n            nodeClassName !== 'node node-start' &&\n            nodeClassName !== 'node node-finish' &&\n            nodeClassName !== 'node node-wall'\n          ) {\n            document.getElementById(`node-${node.row}-${node.col}`).className =\n              'node';\n            node.isVisited = false;\n            node.distance = Infinity;\n            node.distanceToFinishNode =\n              Math.abs(this.state.FINISH_NODE_ROW - node.row) +\n              Math.abs(this.state.FINISH_NODE_COL - node.col);\n          }\n          if (nodeClassName === 'node node-finish') {\n            node.isVisited = false;\n            node.distance = Infinity;\n            node.distanceToFinishNode = 0;\n          }\n          if (nodeClassName === 'node node-start') {\n            node.isVisited = false;\n            node.distance = Infinity;\n            node.distanceToFinishNode =\n              Math.abs(this.state.FINISH_NODE_ROW - node.row) +\n              Math.abs(this.state.FINISH_NODE_COL - node.col);\n            node.isStart = true;\n            node.isWall = false;\n            node.previousNode = null;\n            node.isNode = true;\n          }\n        }\n      }\n    }\n  }\n\n  clearWalls() {\n    if (!this.state.isRunning) {\n      const newGrid = this.state.grid.slice();\n      for (const row of newGrid) {\n        for (const node of row) {\n          let nodeClassName = document.getElementById(\n            `node-${node.row}-${node.col}`,\n          ).className;\n          if (nodeClassName === 'node node-wall') {\n            document.getElementById(`node-${node.row}-${node.col}`).className =\n              'node';\n            node.isWall = false;\n          }\n        }\n      }\n    }\n  }\n\n  /******************** Create Animations ********************/\n  visualize(algo) {\n    if (!this.state.isRunning) {\n      this.clearGrid();\n      this.toggleIsRunning();\n      const {grid} = this.state;\n      const startNode =\n        grid[this.state.START_NODE_ROW][this.state.START_NODE_COL];\n      const finishNode =\n        grid[this.state.FINISH_NODE_ROW][this.state.FINISH_NODE_COL];\n      let visitedNodesInOrder;\n      switch (algo) {\n        case 'Dijkstra':\n          visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n          break;\n        case 'AStar':\n          visitedNodesInOrder = AStar(grid, startNode, finishNode);\n          break;\n        case 'BFS':\n          visitedNodesInOrder = bfs(grid, startNode, finishNode);\n          break;\n        case 'DFS':\n          visitedNodesInOrder = dfs(grid, startNode, finishNode);\n          break;\n        default:\n          // should never get here\n          break;\n      }\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n      nodesInShortestPathOrder.push('end');\n      this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\n    }\n  }\n\n  animate(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        const nodeClassName = document.getElementById(\n          `node-${node.row}-${node.col}`,\n        ).className;\n        if (\n          nodeClassName !== 'node node-start' &&\n          nodeClassName !== 'node node-finish'\n        ) {\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-visited';\n        }\n      }, 10 * i);\n    }\n  }\n\n  /******************** Create path from start to finish ********************/\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      if (nodesInShortestPathOrder[i] === 'end') {\n        setTimeout(() => {\n          this.toggleIsRunning();\n        }, i * 50);\n      } else {\n        setTimeout(() => {\n          const node = nodesInShortestPathOrder[i];\n          const nodeClassName = document.getElementById(\n            `node-${node.row}-${node.col}`,\n          ).className;\n          if (\n            nodeClassName !== 'node node-start' &&\n            nodeClassName !== 'node node-finish'\n          ) {\n            document.getElementById(`node-${node.row}-${node.col}`).className =\n              'node node-shortest-path';\n          }\n        }, i * 40);\n      }\n    }\n  }\n\n  render() {\n    const {grid, mouseIsPressed} = this.state;\n    return (\n      <div>\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark \">\n          <a className=\"navbar-brand\" href=\"/path-finding-visualizer\">\n            <b>PathFinding Visualizer</b>\n          </a>\n          <button\n            className=\"navbar-toggler\"\n            type=\"button\"\n            data-toggle=\"collapse\"\n            data-target=\"#navbarNav\"\n            aria-controls=\"navbarNav\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\">\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n          <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n            <ul className=\"navbar-nav\">\n              <li className=\"nav-item\">\n                <a\n                  className=\"nav-link\"\n                  href=\"https://github.com/mohak92/path-finding-visualizer\">\n                  {' '}\n                  PathFinder Visualizer code{' '}\n                </a>\n              </li>\n              <li className=\"nav-item\">\n                <a className=\"nav-link\" href=\"https://mohak92.github.io\">\n                  Check Out Other Cool Projects\n                </a>\n              </li>\n            </ul>\n          </div>\n        </nav>\n\n        <table\n          className=\"grid-container\"\n          onMouseLeave={() => this.handleMouseLeave()}>\n          <tbody className=\"grid\">\n            {grid.map((row, rowIdx) => {\n              return (\n                <tr key={rowIdx}>\n                  {row.map((node, nodeIdx) => {\n                    const {row, col, isFinish, isStart, isWall} = node;\n                    return (\n                      <Node\n                        key={nodeIdx}\n                        col={col}\n                        isFinish={isFinish}\n                        isStart={isStart}\n                        isWall={isWall}\n                        mouseIsPressed={mouseIsPressed}\n                        onMouseDown={(row, col) =>\n                          this.handleMouseDown(row, col)\n                        }\n                        onMouseEnter={(row, col) =>\n                          this.handleMouseEnter(row, col)\n                        }\n                        onMouseUp={() => this.handleMouseUp(row, col)}\n                        row={row}></Node>\n                    );\n                  })}\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n        <button\n          type=\"button\"\n          className=\"btn btn-danger\"\n          onClick={() => this.clearGrid()}>\n          Clear Grid\n        </button>\n        <button\n          type=\"button\"\n          className=\"btn btn-warning\"\n          onClick={() => this.clearWalls()}>\n          Clear Walls\n        </button>\n        <button\n          type=\"button\"\n          className=\"btn btn-primary\"\n          onClick={() => this.visualize('Dijkstra')}>\n          Dijkstra's\n        </button>\n        <button\n          type=\"button\"\n          className=\"btn btn-primary\"\n          onClick={() => this.visualize('AStar')}>\n          A*\n        </button>\n        <button\n          type=\"button\"\n          className=\"btn btn-primary\"\n          onClick={() => this.visualize('BFS')}>\n          Bread First Search\n        </button>\n        <button\n          type=\"button\"\n          className=\"btn btn-primary\"\n          onClick={() => this.visualize('DFS')}>\n          Depth First Search\n        </button>\n        {this.state.isDesktopView ? (\n          <button\n            type=\"button\"\n            className=\"btn btn-light\"\n            onClick={() => this.toggleView()}>\n            Mobile View\n          </button>\n        ) : (\n          <button\n            type=\"button\"\n            className=\"btn btn-dark\"\n            onClick={() => this.toggleView()}>\n            Desktop View\n          </button>\n        )}\n      </div>\n    );\n  }\n}\n\n/******************** Create Walls ********************/\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  // mouseDown starts to act strange if I don't make newGrid and work off of grid instead.\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  if (!node.isStart && !node.isFinish && node.isNode) {\n    const newNode = {\n      ...node,\n      isWall: !node.isWall,\n    };\n    newGrid[row][col] = newNode;\n  }\n  return newGrid;\n};\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called after the pathfinding methods.\nfunction getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}","// Returns all nodes in the order in which they were visited.\n// Make nodes point back to their previous node so that we can compute the shortest path\n// by backtracking from the finish node.\n\nexport function bfs(grid, startNode, finishNode) {\n    const visitedNodesInOrder = [];\n    let nextNodesStack = [startNode];\n    while (nextNodesStack.length) {\n      const currentNode = nextNodesStack.shift();\n      if (currentNode === finishNode) return visitedNodesInOrder;\n  \n      if (\n        !currentNode.isWall &&\n        (currentNode.isStart || !currentNode.isVisited)\n      ) {\n        currentNode.isVisited = true;\n        visitedNodesInOrder.push(currentNode);\n        const {col, row} = currentNode;\n        let nextNode;\n        if (row > 0) {\n          nextNode = grid[row - 1][col];\n          if (!nextNode.isVisited) {\n            nextNode.previousNode = currentNode;\n            nextNodesStack.push(nextNode);\n          }\n        }\n        if (row < grid.length - 1) {\n          nextNode = grid[row + 1][col];\n          if (!nextNode.isVisited) {\n            nextNode.previousNode = currentNode;\n            nextNodesStack.push(nextNode);\n          }\n        }\n        if (col > 0) {\n          nextNode = grid[row][col - 1];\n          if (!nextNode.isVisited) {\n            nextNode.previousNode = currentNode;\n            nextNodesStack.push(nextNode);\n          }\n        }\n        if (col < grid[0].length - 1) {\n          nextNode = grid[row][col + 1];\n          if (!nextNode.isVisited) {\n            nextNode.previousNode = currentNode;\n            nextNodesStack.push(nextNode);\n          }\n        }\n      }\n    }\n    // return visitedNodesInOrder;\n  }","// Returns all nodes in the order in which they were visited.\n// Make nodes point back to their previous node so that we can compute the shortest path\n// by backtracking from the finish node.\n\nexport function dfs(grid, startNode, finishNode) {\n    const visitedNodesInOrder = [];\n    const nextNodesStack = [];\n    nextNodesStack.push(startNode);\n    while (nextNodesStack.length) {\n      const currentNode = nextNodesStack.pop();\n  \n      if (currentNode === finishNode) {\n        return visitedNodesInOrder;\n      }\n  \n      if (\n        !currentNode.isWall &&\n        (currentNode.isStart || !currentNode.isVisited)\n      ) {\n        currentNode.isVisited = true;\n        visitedNodesInOrder.push(currentNode);\n  \n        const {col, row} = currentNode;\n        let nextNode;\n        if (row > 0) {\n          nextNode = grid[row - 1][col];\n          if (!nextNode.isVisited) {\n            nextNode.previousNode = currentNode;\n            nextNodesStack.push(nextNode);\n          }\n        }\n        if (row < grid.length - 1) {\n          nextNode = grid[row + 1][col];\n          if (!nextNode.isVisited) {\n            nextNode.previousNode = currentNode;\n            nextNodesStack.push(nextNode);\n          }\n        }\n        if (col > 0) {\n          nextNode = grid[row][col - 1];\n          if (!nextNode.isVisited) {\n            nextNode.previousNode = currentNode;\n            nextNodesStack.push(nextNode);\n          }\n        }\n        if (col < grid[0].length - 1) {\n          nextNode = grid[row][col + 1];\n          if (!nextNode.isVisited) {\n            nextNode.previousNode = currentNode;\n            nextNodesStack.push(nextNode);\n          }\n        }\n      }\n    }\n  }","import React from 'react';\nimport './App.css';\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}